#!/bin/bash

install() {
  git clone "$1" "$2" >/dev/null 2>&1
}

check_update() {
  # First just check the HEAD commits. This saves a ton of time, as it is
  # the only commit we care about. If we find that there is a difference,
  # we can do a full fetch to get the details
  [ $(git ls-remote --heads origin master | sed 's/[^0-9a-f].*$//') == \
    $(git rev-parse master) ] && return 0

  git fetch >/dev/null 2>&1
  commits=$(git rev-list --left-only --count origin/master...master)
  [ $commits -eq 0 ] || log="$(git log --oneline master..origin/master)"
  return $commits
}

update() {
  git pull -q
}

link_repo() {
  local files depends repo repo_url
  declare -A files

  repo="$1"
  $repo

  for source_file in "${!files[@]}"; do
    dest_file="$(expand_tilde "${files["${source_file}"]}")"

    # Make dir first
    if [ ! -d "${dest_file%/*}" ]; then
      mkdir -p "${dest_file%/*}" || {
        echo >&2 "Cannot make directory ${dest_file%/*} for file ${dest_file}"
        continue
      }
    fi

    # Test if this file is this script or config file
    if [ "${source_file}" == "${script_file}" ] ||
       [ "${dest_file}"   == "${script_file}" ] ||
       [ "${dest_file}"   == "${config_file}" ] ||
       [ "${repo_dir}/${repo}/${source_file}" == "${config_file}" ]; then
      rerun="true"
    fi

    ln -fs "${repo_dir}/${repo}/${source_file}" "${dest_file}"
  done
}

is_installed() {
  [ -d "${repo_dir}/${repo}" ]
}

expand_tilde() {
  echo "${1/#\~/$HOME}"
}

update_repo() {
  local commits log repo
  repo="$1"
  cd "${repo_dir}/${repo}"

  check_update || {
    update
    link_repo "${repo}"

    [ -n "${printing}" ] ||
      printf "updated %s: %i commit(s)\n%s\n\n" "${repo}" "${commits}" "${log}"
  }
}

install_repo() {
  local files depends repo repo_url
  declare -A files

  # Get repo info
  repo="$1"
  $repo

  # Check dependencies
  dependency "${repo}" || return

  # Install
  cd "${repo_dir}"
  install "${repo_url}" "${repo}" || {
    echo >&2 "Failed to install ${repo}"
    return 1
  }
  link_repo "${repo}"

  [ -n "${printing}" ] || echo "installed ${repo}"
}

dependency() {
  needed=0
  for depend in "${depends[@]}"; do
    hash "${depend}" 2>/dev/null || {
      [ -n "${printing}" ] || echo "${depend} is not installed for ${repo}"
      needed=1
    }
  done
  return $needed
}

main() {
  # Check bash version
  BASH="${BASH_VERSION%.*}"
  BASH_MAJOR="${BASH%.*}"

  if [ "${BASH_MAJOR}" -lt 4 ]; then
    echo >&2 "ERROR: ${0} requires Bash version >= 4.0"
    echo >&2 "you're running ${BASH}, which doesn't support dictionary arrays"
    exit 1
  fi

  # Check for git
  hash git 2>/dev/null || {
    echo >&2 "Git is not installed, can't proceed"
    exit 1
  }

  # Find config
  if [ "$1" == "-c" ]; then
    config_file="$2"
    shift 2
  else
    config_file="${XDG_CONFIG_HOME:="${HOME}/.config"}/profile-manager/config"
  fi

  if [ "$1" == "-q" ] || [ "$1" == "--quiet" ]; then
    printing="no"
  fi

  # Load config
  if [ -r "${config_file}" ]; then
    # Load file into var
    config="$(<"${config_file}")"
    # shellcheck source=config
    . <(echo "${config}")
  else
    echo >&2 "Failed to load config file ${config_file}"
    exit 1
  fi

  # Check for mandatory settings
  if [ -z "${repo_dir}" ]; then
    echo >&2 "'repo_dir' must be set in config"
    exit 1
  fi

  # Get config data because we want our config to be easy:
  # We can use ~ for $HOME
  # We don't have to list our profiles because we can search for them
  repo_list=($(echo "${config}" | sed -n 's/^\([A-Za-z0-9\._-]*\) *().*/\1/p' ))
  repo_dir="$(expand_tilde "${repo_dir}")"

  # Make repo_dir if it doesn't exist
  if [ ! -d "${repo_dir}" ]; then
    mkdir -p "${repo_dir}"
  fi

  # Find where this script and config really are, in case of symlinks.
  # This won't fix every edge case, but most of them.
  script_file="$0"
  if [ -h "${script_file}" ]; then
    script_file="$(readlink -f "${script_file}")"
  fi
  if [ -h "${config_file}" ]; then
    config_file="$(readlink -f "${config_file}")"
  fi

  # Update/Install repos
  for repo in "${repo_list[@]}"; do
    if is_installed "${repo}"; then
      update_repo "${repo}" &
    else
      install_repo "${repo}" &
    fi
  done
  wait

  # Rerun if we modify config or ourselves
  if [ "${rerun}" == "true" ]; then
    exec "$0" "$@"
  fi

  # Cleanup broken symlinks in home
  find "${HOME}" -type l -exec test ! -e {} \; -delete
}

main "$@"
